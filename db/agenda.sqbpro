<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="agenda.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="0"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="3182"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="clientes" custom_title="0" dock_id="1" table="4,8:mainclientes"/><dock_state state="000000ff00000000fd00000001000000020000000000000000fc0100000001fb000000160064006f0063006b00420072006f00770073006500310100000000ffffffff0000011300ffffff000000000000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings/></tab_browse><tab_sql><sql name="SQL 1*">-- Crear la base de datos (en SQLite es opcional, solo sirve en CLI con .open)
-- CREATE DATABASE IF NOT EXISTS baseAgendaPy;

-- Tabla personas (base para usuarios y clientes)
CREATE TABLE IF NOT EXISTS personas (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    nombre TEXT NOT NULL,
    email TEXT,
    num_celular TEXT,
    direccion TEXT,
    ciudad TEXT,
    fecha_nacimiento TEXT,   -- formato 'YYYY-MM-DD'
    creado_en TEXT DEFAULT (datetime('now'))
);

-- Usuarios &quot;hereda&quot; de personas
CREATE TABLE IF NOT EXISTS usuarios (
    id INTEGER PRIMARY KEY,
    rol TEXT,
    FOREIGN KEY (id) REFERENCES personas(id)
);

-- Clientes &quot;hereda&quot; de personas
CREATE TABLE IF NOT EXISTS clientes (
    id INTEGER PRIMARY KEY,
    edad INTEGER,
    FOREIGN KEY (id) REFERENCES personas(id)
);

-- Turnos
CREATE TABLE IF NOT EXISTS turnos (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    usuario_id INTEGER NOT NULL,
    cliente_id INTEGER NOT NULL,
    inicio TEXT NOT NULL,   -- formato 'YYYY-MM-DD HH:MM:SS'
    fin TEXT NOT NULL,
    estado TEXT NOT NULL DEFAULT 'pendiente',
    notas TEXT,

    FOREIGN KEY (usuario_id) REFERENCES usuarios(id) ON DELETE RESTRICT,
    FOREIGN KEY (cliente_id) REFERENCES clientes(id) ON DELETE RESTRICT,
    CHECK (julianday(fin) &gt; julianday(inicio)),
    CHECK (estado IN ('pendiente','confirmado','cancelado','completado','ausente'))
);

-- Uniques: turnos no repetidos
CREATE UNIQUE INDEX IF NOT EXISTS uq_turno_exacto
ON turnos (usuario_id, cliente_id, inicio, fin);

-- Índices para búsquedas
CREATE INDEX IF NOT EXISTS idx_turnos_usuario_inicio ON turnos (usuario_id, inicio);
CREATE INDEX IF NOT EXISTS idx_turnos_cliente_inicio ON turnos (cliente_id, inicio);
</sql><current_tab id="0"/></tab_sql></sqlb_project>
